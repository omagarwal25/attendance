// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
  userId       String

  @@index([userId])
}

model User {
  id                  String         @id @default(cuid())
  email               String         @unique
  emailVerified       DateTime?
  accounts            Account[]
  sessions            Session[]
  buildSessions       BuildSession[]
  tag                 Tag[]
  BuildSessionRequest Request[]
}

model Tag {
  id       String  @id @default(cuid())
  uuid     String  @unique
  user     User?   @relation(fields: [userId], references: [id])
  userId   String?
  sequence String?

  @@index([userId])
}

model BuildSession {
  id                   String    @id @default(cuid())
  startAt              DateTime
  endAt                DateTime?
  manual               Boolean   @default(false)
  buildSessionRequests Request[]

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([userId])
}

model Request {
  id      String        @id @default(cuid())
  status  RequestStatus @default(PENDING)
  startAt DateTime?
  endAt   DateTime
  type    RequestType

  user      User         @relation(fields: [userId], references: [id])
  userId    String
  session   BuildSession? @relation(fields: [sessionId], references: [id])
  sessionId String?

  @@index([userId])
  @@index([sessionId])
}

enum RequestStatus {
  PENDING
  ACCEPTED
  DENIED
  CANCELLED
}

enum RequestType {
  FULL
  OUT
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
